/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.textgame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.Timer;

/**
 * @author Jani Aalto
 */
public class GameUI extends javax.swing.JFrame {

    String playerChar = "O";
    String fieldTexture = "_";
    String projectileGraphic = "V";
    int rowWidth = 20;
    int rowNumber = 10;
    int delay = 1000;  // timer delay in milliseconds
    int scoreValue = 10;
    Integer currentScore = 0;
    ArrayList<String> allRows = new ArrayList<>();  // textArea contents
    ArrayList<Projectile> projectileList = new ArrayList<>();
    int maxProjectiles = 0;
    int projectileNum = 0;
    int spawnChance = 0;  // percentage likelihood of one or more projectiles spawning every tick
    int projectilesToSpawn = 0;
    int difficulty = 1;
    boolean gameStarted = false;
    boolean gameOver = false;
    boolean invincible = false;
    boolean timerFlag = false;  // used while resetting the game

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        DialogOKButton = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        exitButton = new javax.swing.JButton();
        LeftButton = new javax.swing.JButton();
        RightButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        SettingsButton = new javax.swing.JButton();
        scoreTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();

        jDialog1.setAlwaysOnTop(true);
        jDialog1.setMinimumSize(new java.awt.Dimension(430, 316));

        jSlider1.setMaximum(30);
        jSlider1.setMinimum(10);
        jSlider1.setValue(20);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setText("Game Field Width: 20");

        jLabel3.setText("Game Difficulty");

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Easy");

        jRadioButton2.setText("Hard");

        DialogOKButton.setText("OK");
        DialogOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DialogOKButtonActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Invincibility: OFF");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButton1)))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel3))))
                .addContainerGap(165, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(DialogOKButton)
                .addGap(56, 56, 56))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(DialogOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(10);
        jTextArea1.setText("...");
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        exitButton.setText("Quit");
        exitButton.setFocusable(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        LeftButton.setText(" Left  ");
        LeftButton.setFocusable(false);
        LeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftButtonActionPerformed(evt);
            }
        });

        RightButton.setText("Right");
        RightButton.setFocusable(false);
        RightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightButtonActionPerformed(evt);
            }
        });

        ResetButton.setText("Start / Reset");
        ResetButton.setFocusable(false);
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        SettingsButton.setText("Settings");
        SettingsButton.setFocusable(false);
        SettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsButtonActionPerformed(evt);
            }
        });

        scoreTextField.setEditable(false);
        scoreTextField.setColumns(6);
        scoreTextField.setText("0");
        scoreTextField.setFocusable(false);

        jLabel1.setText("Score");

        stopButton.setText("Stop");
        stopButton.setFocusable(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(36, 36, 36)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SettingsButton)
                            .addComponent(ResetButton)
                            .addComponent(stopButton))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ResetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stopButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SettingsButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LeftButton)
                    .addComponent(RightButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(exitButton)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        ButtonAction buttonAction = new ButtonAction("Reset");
        buttonAction.actionPerformed(evt);
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void LeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftButtonActionPerformed
        ButtonAction buttonAction = new ButtonAction("Left");
        buttonAction.actionPerformed(evt);
    }//GEN-LAST:event_LeftButtonActionPerformed

    private void RightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightButtonActionPerformed
        ButtonAction buttonAction = new ButtonAction("Right");
        buttonAction.actionPerformed(evt);
    }//GEN-LAST:event_RightButtonActionPerformed

    private void SettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsButtonActionPerformed
        if (!gameStarted)
            jDialog1.setVisible(true);
    }//GEN-LAST:event_SettingsButtonActionPerformed

    private void DialogOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DialogOKButtonActionPerformed
        jDialog1.setVisible(false);
    }//GEN-LAST:event_DialogOKButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopGame();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        jLabel2.setText("Game Field Width: " + jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        invincible = !invincible;
        System.out.println("invincible: " + invincible);
        if (invincible)
            jToggleButton1.setText("Invincibility ON");
        else
            jToggleButton1.setText("Invincibility OFF");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public GameUI() {  // Creates new form DemoUI
        initComponents(); // auto-generated function, uneditable
        jTextArea1.getInputMap(jTextArea1.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("SPACE"),"spaceButton");
        jTextArea1.getActionMap().put("spaceButton", new ButtonAction("Reset"));
        jTextArea1.getInputMap(jTextArea1.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("R"),"resetButton");
        jTextArea1.getActionMap().put("resetButton", new ButtonAction("Reset"));
        jTextArea1.getInputMap(jTextArea1.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("LEFT"),"leftButton");
        jTextArea1.getActionMap().put("leftButton", new ButtonAction("Left"));
        jTextArea1.getInputMap(jTextArea1.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("RIGHT"),"rightButton");
        jTextArea1.getActionMap().put("rightButton", new ButtonAction("Right"));
        
        buttonGroup1.add(jRadioButton1);  // difficulty selection buttons
        buttonGroup1.add(jRadioButton2);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GameUI().setVisible(true);
            }
        });
    } 
    
    private void startGame(){
        if (jRadioButton1.isSelected()){  // easy difficulty
            difficulty = 1;
            delay = 500;
            scoreValue = 10;
            projectilesToSpawn = 1;
            maxProjectiles = 12;
            spawnChance = 80;
        }
        if (jRadioButton2.isSelected()){  // hard difficulty
            difficulty = 2;
            delay = 300;
            scoreValue = 30;
            projectilesToSpawn = 2;
            maxProjectiles = 20;
            spawnChance = 90;
        }
        rowWidth = jSlider1.getValue();
        
        initialiseField();  // creates the empty game field and places the player character
        currentScore = 0;
        scoreTextField.setText(currentScore.toString());
        gameOver = false;
        gameStarted = true;
        gameTimer();
    }
    
    private void endGame(){
        System.out.println("GAME OVER");
        gameOver = true;
        gameStarted = false;
    } 
    
    private void stopGame(){
        System.out.println("game stopped");
        gameOver = true;
        gameStarted = false;
    } 
    
    private void displayGameOver(){
        String middleRow = allRows.get(rowNumber / 2);
        int textPos = rowWidth / 2 - 5;
        String gameOverRow = "";
        if (middleRow.length() >= 11)
            gameOverRow = middleRow.substring(0, textPos) + "GAME OVER!" + middleRow.substring(textPos + 11);
        else
            gameOverRow = middleRow.substring(0, textPos) + "GAME OVER!";
        updateRowInField(gameOverRow, rowNumber / 2);
        updateField();
    }
    
    private void increaseScore(){
        currentScore += scoreValue;
        scoreTextField.setText(currentScore.toString());
    }
    
    private String replaceCharAtIndexHor(String origString, String chr, int index){  // for player movement
        String resultString = origString.substring(0, index) + chr + origString.substring(index+1);
        return resultString;
    }
    
    private String replaceCharAtIndexVer(String origString, String chr, int index){  // for projectiles
        String resultString = origString.substring(0, index) + chr + origString.substring(index+1);
        
        String replacedString = origString.substring(index, index+1);
        if (replacedString.equals(playerChar) && chr.equals(projectileGraphic))
            if (invincible)
                return origString;
            else
                endGame();
        // case of player moving into a projectile from the side and moveProjectile() erasing the
        // projectile graphic from its previous location, thus actually erasing the player character
        // this is why I had to split replaceCharAtIndex() into two functions
        else if (replacedString.equals(playerChar) && chr.equals(fieldTexture)){
            if (difficulty == 1 || invincible)
                return origString;
            else
                endGame();  // on hard difficulty the player can't touch projectiles even from the side
        }
        
        return resultString;
    }
    
    private String movePlayerCharacter(String bottomRow, int direction){  // direction should be -1 or 1
        int location = bottomRow.indexOf(playerChar);
        int newLocation = location + direction;
        if (newLocation < 0 || newLocation == rowWidth || location == -1)
            return bottomRow;
        else{
            bottomRow = replaceCharAtIndexHor(bottomRow, fieldTexture, location);
            bottomRow = replaceCharAtIndexHor(bottomRow, playerChar, newLocation);
            return bottomRow;
        }
    }
    
    private void initialiseField(){
        String emptyRow = "";
        String fullField = "";
        allRows.clear();
        
        int x = 0, y = 0, z = 0;
        while (x < rowWidth){
            emptyRow += fieldTexture;
            x++;}
        while (y < rowNumber){
            allRows.add(emptyRow);
            y++;}
        int playerPos = rowWidth / 2;
        String bottomRow = allRows.get(rowNumber-1);
        bottomRow = replaceCharAtIndexHor(bottomRow, playerChar, playerPos);  // places player character
        allRows.add(rowNumber-1, bottomRow);
        
        while (z < rowNumber){
            fullField += allRows.get(z) + "\n";
            z++;}
        jTextArea1.setText(fullField);
    }
    
    private void updateRowInField(String row, int rowNum){
        allRows.set(rowNum, row);
    }
    
    private void updateField(){
        String fullField = "";
        int x = 0;
        while (x < rowNumber){
            fullField += allRows.get(x) + "\n";
            x++;}
        jTextArea1.setText(fullField);
    }

    private class ButtonAction extends AbstractAction {  // responds to player's button and key presses
        String key = "";
        public ButtonAction(String key){
            this.key = key;
        }
        String bottomRow = "";
        
        @Override
        public void actionPerformed(ActionEvent e) {
            if (gameStarted)
                bottomRow = allRows.get(rowNumber-1);
            switch (key) {          
                case "Reset":
                    if (gameStarted){
                        endGame();
                        timerFlag = true;
                    }
                    projectileList.clear();
                    startGame();
                    System.out.println("Game started!");
                    break;
                case "Left":
                    if (gameStarted && !gameOver){
                        bottomRow = movePlayerCharacter(bottomRow, -1);
                        updateRowInField(bottomRow, rowNumber-1);
                        updateField();
                    }
                    break;
                case "Right":
                    if (gameStarted && !gameOver){
                        bottomRow = movePlayerCharacter(bottomRow, 1);
                        updateRowInField(bottomRow, rowNumber-1);
                        updateField();
                        break;
                    }
            }
        }
    }
    
    private void gameTimer() {
        ActionListener timerCode = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (timerFlag) {
                        ((Timer) evt.getSource()).stop();
                        timerFlag = false;
                    }
                    
                    int x = 0;
                    while (x < projectileList.size() && !projectileList.isEmpty()) {  // updates all projectile positions
                        Projectile projectile = projectileList.get(x);
                        moveProjectile(projectile);
                        x++;
                    }

                    if ((projectileList.size() + projectilesToSpawn) < maxProjectiles) {
                        int randomValue = (int)Math.round(Math.random()*100);  // between 0 and 99
                        if (randomValue < spawnChance) {
                            createProjectiles(projectilesToSpawn);
                            
                            // gradually increases maximum number of projectiles allowed on the field
                            // this is also called increasingly often as the number of projectiles spawned goes up
                            if (projectileNum != 0 && projectileNum%10 == 0) {
                                maxProjectiles++;
                                System.out.println("maxProjectiles: " + maxProjectiles);
                                
                                // gradually increases maximum number of projectiles to spawn at a time
                                if (projectilesToSpawn < rowWidth-2 && maxProjectiles%4 == 0){
                                    projectilesToSpawn++;
                                    System.out.println("projectilesToSpawn: " + projectilesToSpawn);
                                    
                                    if (spawnChance < 100){
                                        spawnChance++;
                                        System.out.println("spawnChance: " + spawnChance);
                                    }
                                }
                            }
                        }
                    }

                    x = 0;
                    while (x < projectileList.size() && !projectileList.isEmpty()) {  // deletes projectiles that exit the field
                        Projectile projectile = projectileList.get(x);
                        if (projectile.y >= rowNumber) {
                            projectileList.remove(projectile);
                            increaseScore();
                        }
                        x++;
                    }

                    updateField();  // updates the textArea every tick

                    if (gameOver) {
                        ((Timer) evt.getSource()).stop();
                        projectileList.clear();
                        displayGameOver();
                    }
                }
                catch (Exception e) {
                    System.out.println("error in timer: " + e.getCause());
                    ((Timer) evt.getSource()).stop();
                    //jTextArea1.setText("ERROR");
                }
            }
        };
        new Timer(delay, timerCode).start();
    }
    
    private void createProjectiles(int number){
        int randomValue = 0;
        ArrayList<Integer> alreadySpawned = new ArrayList<>();
        
        // randomises how many projectiles are spawned per tick between 1 and maxProjectiles
        int actualNumber = (int)(Math.random()*(number)+1);
        
        int gap = number - actualNumber;
        int gapPortion = 0;
        if (gap > 2){  // slightly raises minimum number spawned to keep up with maximum value
            gapPortion = (int)(Math.random()*(gap)+1);
            actualNumber += ((int)gapPortion / 3);
        }
        //System.out.println("max number: " + number + ", actualNumber: " + actualNumber + ", added gapPortion: " + ((int)gapPortion / 3));
        
        while (actualNumber > 0){
            randomValue = (int)(Math.random()*(rowWidth));
            while (alreadySpawned.contains(randomValue)){
                randomValue = (int)(Math.random()*(rowWidth));
            }

            Projectile projectile = new Projectile(randomValue, 0, projectileNum);
            projectileList.add(projectile);
            projectileNum++;
            
            alreadySpawned.add(randomValue);  // makes sure two projectiles can't spawn in the same spot

            String row = allRows.get(0);
            row = replaceCharAtIndexVer(row, projectileGraphic, projectile.x);
            updateRowInField(row, 0);

            actualNumber--;
        }
    }
    
    private void moveProjectile(Projectile projectile){
        projectile.y++;
        
        if (projectile.y < rowNumber){
            String row = "";
            row = allRows.get(projectile.y);
            row = replaceCharAtIndexVer(row, projectileGraphic, projectile.x);
            updateRowInField(row, projectile.y);
        }
        // removes projectile graphic from its previous location
        if (projectile.y <= rowNumber){
            String prevRow = allRows.get(projectile.y-1);
            prevRow = replaceCharAtIndexVer(prevRow, fieldTexture, projectile.x);
            updateRowInField(prevRow, projectile.y-1);
        }
        //System.out.println("Projectile " + projectile.projectileID + " x: " + projectile.x + ", y: " + projectile.y);
    }
    
    private class Projectile{
        int x;
        int y;
        int projectileID;  // used in debugging
        private Projectile(int x, int y, int projectileNumber) {
            this.x = x;
            this.y = y;
            this.projectileID = projectileNumber;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DialogOKButton;
    private javax.swing.JButton LeftButton;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton RightButton;
    private javax.swing.JButton SettingsButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton exitButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField scoreTextField;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables


}
